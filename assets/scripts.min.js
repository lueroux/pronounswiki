// Performance optimizations
const requestIdleCallback = window.requestIdleCallback || function(cb) {
  return setTimeout(() => {
    const start = Date.now();
    cb({
      didTimeout: false,
      timeRemaining: () => Math.max(0, 50 - (Date.now() - start))
    });
  }, 1);
};

// Lazy loading images with IntersectionObserver
const lazyLoadImages = () => {
  const lazyImages = document.querySelectorAll('img[data-src]');
  
  if ('IntersectionObserver' in window) {
    const imageObserver = new IntersectionObserver((entries, observer) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const img = entry.target;
          img.src = img.dataset.src;
          img.classList.add('loaded');
          observer.unobserve(img);
        }
      });
    }, {
      rootMargin: '50px 0px',
      threshold: 0.01
    });

    lazyImages.forEach(img => imageObserver.observe(img));
  } else {
    // Fallback for browsers without IntersectionObserver
    lazyImages.forEach(img => {
      img.src = img.dataset.src;
      img.classList.add('loaded');
    });
  }
};

// Accessibility features
const toggleAccessibilityPanel = () => {
  const panel = document.querySelector('.accessibility-panel');
  panel.classList.toggle('show');
  
  // Focus management
  if (panel.classList.contains('show')) {
    const firstButton = panel.querySelector('button');
    firstButton?.focus();
  }
};

const toggleHighContrast = () => {
  document.body.classList.toggle('high-contrast');
  localStorage.setItem('highContrast', document.body.classList.contains('high-contrast'));
};

const applyColorScheme = (scheme) => {
  document.body.classList.remove('high-contrast', 'easy-read', 'inverted');
  switch(scheme) {
    case 1:
      document.body.classList.add('easy-read');
      localStorage.setItem('colorScheme', 'easy-read');
      break;
    case 2:
      document.body.classList.add('inverted');
      localStorage.setItem('colorScheme', 'inverted');
      break;
  }
};

const toggleDyslexiaFriendlyFont = () => {
  document.body.classList.toggle('dyslexia-friendly');
  localStorage.setItem('dyslexiaFriendly', document.body.classList.contains('dyslexia-friendly'));
};

const toggleBoldText = () => {
  document.body.classList.toggle('bold-text');
  localStorage.setItem('boldText', document.body.classList.contains('bold-text'));
};

const resetToDefault = () => {
  document.body.className = '';
  localStorage.removeItem('highContrast');
  localStorage.removeItem('colorScheme');
  localStorage.removeItem('dyslexiaFriendly');
  localStorage.removeItem('boldText');
};

// Modal functionality
const modal = document.getElementById('myModal');
const btn = document.getElementById('openModalBtn');
const span = document.getElementById('closeModal');

const openModal = () => {
  modal.style.display = 'flex';
  document.body.style.overflow = 'hidden';
  // Focus management
  const closeButton = modal.querySelector('.close');
  closeButton?.focus();
};

const closeModal = () => {
  modal.style.display = 'none';
  document.body.style.overflow = '';
  // Return focus to the button that opened the modal
  btn?.focus();
};

btn?.addEventListener('click', openModal);
span?.addEventListener('click', closeModal);

window.addEventListener('click', (event) => {
  if (event.target === modal) {
    closeModal();
  }
});

// Smooth scrolling with requestAnimationFrame
const smoothScroll = (target) => {
  const targetPosition = target.getBoundingClientRect().top + window.pageYOffset;
  const startPosition = window.pageYOffset;
  const distance = targetPosition - startPosition;
  let startTime = null;

  const animation = (currentTime) => {
    if (startTime === null) startTime = currentTime;
    const timeElapsed = currentTime - startTime;
    const run = ease(timeElapsed, startPosition, distance, 1000);
    window.scrollTo(0, run);
    if (timeElapsed < 1000) requestAnimationFrame(animation);
  };

  const ease = (t, b, c, d) => {
    t /= d / 2;
    if (t < 1) return c / 2 * t * t + b;
    t--;
    return -c / 2 * (t * (t - 2) - 1) + b;
  };

  requestAnimationFrame(animation);
};

document.querySelectorAll('a[href^="#"]').forEach(anchor => {
  anchor.addEventListener('click', function (e) {
    e.preventDefault();
    const target = document.querySelector(this.getAttribute('href'));
    if (target) {
      smoothScroll(target);
    }
  });
});

// Service Worker Registration
if ('serviceWorker' in navigator) {
  window.addEventListener('load', () => {
    navigator.serviceWorker.register('/sw.js')
      .then(registration => {
        console.log('ServiceWorker registration successful');
      })
      .catch(err => {
        console.error('ServiceWorker registration failed: ', err);
      });
  });
}

// Performance monitoring
const monitorPerformance = () => {
  if ('performance' in window) {
    requestIdleCallback(() => {
      const perfData = window.performance.timing;
      const pageLoadTime = perfData.loadEventEnd - perfData.navigationStart;
      const domLoadTime = perfData.domComplete - perfData.domLoading;
      
      // Send performance data to analytics
      if (typeof gtag === 'function') {
        gtag('event', 'timing_complete', {
          'name': 'page_load',
          'value': pageLoadTime,
          'event_category': 'Performance'
        });
        
        gtag('event', 'timing_complete', {
          'name': 'dom_load',
          'value': domLoadTime,
          'event_category': 'Performance'
        });
      }
    });
  }
};

// Error tracking
window.addEventListener('error', (event) => {
  console.error('Error:', event.message, '\nURL:', event.filename, '\nLine:', event.lineno, '\nColumn:', event.colno, '\nError object:', event.error);
  
  // Send error to analytics
  if (typeof gtag === 'function') {
    gtag('event', 'exception', {
      'description': event.message,
      'fatal': false
    });
  }
  
  return false;
});

// Add loading state to buttons
document.querySelectorAll('button').forEach(button => {
  button.addEventListener('click', function() {
    const originalText = this.textContent;
    this.textContent = 'Loading...';
    this.disabled = true;
    
    // Reset button after animation
    setTimeout(() => {
      this.textContent = originalText;
      this.disabled = false;
    }, 1000);
  });
});

// Add keyboard navigation
document.addEventListener('keydown', (e) => {
  if (e.key === 'Escape') {
    closeModal();
  }
});

// Add focus management for accessibility
document.addEventListener('focus', (e) => {
  if (e.target.matches('a, button, input, select, textarea')) {
    e.target.classList.add('focus-visible');
  }
}, true);

document.addEventListener('blur', (e) => {
  if (e.target.matches('a, button, input, select, textarea')) {
    e.target.classList.remove('focus-visible');
  }
}, true);

// Page preloading
const preloadedPages = new Map();

const preloadPage = async (url) => {
  if (!preloadedPages.has(url)) {
    try {
      const response = await fetch(url);
      const html = await response.text();
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, "text/html");
      const mainContent = doc.querySelector("main").innerHTML;
      preloadedPages.set(url, mainContent);
    } catch (err) {
      console.error("Failed to preload:", err);
    }
  }
};

const updateMainContent = async (event, url) => {
  event.preventDefault();
  
  try {
    if (preloadedPages.has(url)) {
      document.getElementById("main-content").innerHTML = preloadedPages.get(url);
    } else {
      const response = await fetch(url);
      const html = await response.text();
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, "text/html");
      document.getElementById("main-content").innerHTML = doc.querySelector("main").innerHTML;
    }
    
    window.history.pushState(null, "", url);
    document.title = "Pronouns Wiki - " + url.split('/').pop();
    
    // Update focus
    document.getElementById("main-content").setAttribute('tabindex', '-1');
    document.getElementById("main-content").focus();
  } catch (err) {
    console.error("Failed to load page:", err);
  }
};

// Initialize
document.addEventListener('DOMContentLoaded', () => {
  // Load saved preferences
  if (localStorage.getItem('highContrast') === 'true') {
    document.body.classList.add('high-contrast');
  }
  if (localStorage.getItem('dyslexiaFriendly') === 'true') {
    document.body.classList.add('dyslexia-friendly');
  }
  if (localStorage.getItem('boldText') === 'true') {
    document.body.classList.add('bold-text');
  }
  
  const savedColorScheme = localStorage.getItem('colorScheme');
  if (savedColorScheme) {
    document.body.classList.add(savedColorScheme);
  }
  
  // Initialize lazy loading
  lazyLoadImages();
  
  // Initialize performance monitoring
  monitorPerformance();
  
  // Add event listeners for internal links
  document.querySelectorAll(".internal-link").forEach(link => {
    const url = link.getAttribute("href");
    link.addEventListener("mouseover", () => preloadPage(url));
    link.addEventListener("click", (event) => updateMainContent(event, url));
  });
});