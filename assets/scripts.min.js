// Register Service Worker
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('/assets/sw.js')
            .then(registration => {
                console.log('ServiceWorker registration successful');
            })
            .catch(err => {
                console.log('ServiceWorker registration failed: ', err);
            });
    });
}

// Modal functionality
const modal = document.getElementById('myModal');
const btn = document.getElementById('openModalBtn');
const span = document.getElementById('closeModal');
const iframe = document.getElementById('iframeContent');

btn.onclick = function() {
    modal.style.display = 'block';
    iframe.src = '/email-signature';
    document.body.style.overflow = 'hidden';
}

span.onclick = function() {
    modal.style.display = 'none';
    iframe.src = '';
    document.body.style.overflow = 'auto';
}

window.onclick = function(event) {
    if (event.target == modal) {
        modal.style.display = 'none';
        iframe.src = '';
        document.body.style.overflow = 'auto';
    }
}

// Accessibility Panel
function toggleAccessibilityPanel() {
    const panel = document.querySelector('.accessibility-panel');
    panel.style.display = panel.style.display === 'block' ? 'none' : 'block';
}

// High Contrast Mode
function toggleHighContrast() {
    document.body.classList.toggle('high-contrast');
}

// Color Schemes
function applyColorScheme(scheme) {
    document.body.classList.remove('high-contrast', 'easy-read', 'inverted');
    switch(scheme) {
        case 1:
            document.body.classList.add('easy-read');
            break;
        case 2:
            document.body.classList.add('inverted');
            break;
    }
}

// Dyslexia Friendly Font
function toggleDyslexiaFriendlyFont() {
    document.body.classList.toggle('dyslexia-friendly');
}

// Bold Text
function toggleBoldText() {
    document.body.classList.toggle('bold-text');
}

// Reset to Default
function resetToDefault() {
    document.body.className = '';
}

// Lazy Loading Images
document.addEventListener('DOMContentLoaded', function() {
    const images = document.querySelectorAll('img[data-src]');
    const imageObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const img = entry.target;
                img.src = img.dataset.src;
                img.removeAttribute('data-src');
                observer.unobserve(img);
            }
        });
    });

    images.forEach(img => imageObserver.observe(img));
});

// Performance Monitoring
if ('performance' in window) {
    window.addEventListener('load', () => {
        setTimeout(() => {
            const perfData = window.performance.timing;
            const pageLoadTime = perfData.loadEventEnd - perfData.navigationStart;
            console.log(`Page load time: ${pageLoadTime}ms`);
        }, 0);
    });
}

// Smooth Scrolling
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        document.querySelector(this.getAttribute('href')).scrollIntoView({
            behavior: 'smooth'
        });
    });
});

// Debounce Function for Performance
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Optimize Scroll Performance
window.addEventListener('scroll', debounce(() => {
    // Add any scroll-based animations or effects here
}, 100));

// Add loading state for better UX
document.addEventListener('DOMContentLoaded', () => {
    document.body.classList.add('loaded');
});

function loadNavigationMenu() {
    // Get the current path to determine the correct assets path
    const currentPath = window.location.pathname;
    const isRoot = currentPath === '/' || currentPath === '/index.html';
    const assetsPath = isRoot ? '/assets' : '../assets';
    
    fetch(`${assetsPath}/nav-menu.html`)
        .then(response => response.text())
        .then(html => {
            const menuContainer = document.createElement('div');
            menuContainer.innerHTML = html;
            const mainContent = document.querySelector('main');
            if (mainContent) {
                mainContent.insertAdjacentElement('afterbegin', menuContainer.firstElementChild);
            }
        })
        .catch(error => console.error('Error loading navigation menu:', error));
}

// Call the function when the DOM is loaded
document.addEventListener('DOMContentLoaded', loadNavigationMenu);